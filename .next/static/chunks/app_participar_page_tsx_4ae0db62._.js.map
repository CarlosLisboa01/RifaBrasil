{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Vizantu.dev/RifaBrasil/app/participar/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { supabase } from '@/utils/supabase';\r\nimport Link from 'next/link';\r\nimport Image from 'next/image';\r\nimport { Raffle } from '@/types';\r\n\r\nconst participationSchema = z.object({\r\n  chosenNumbers: z\r\n    .string()\r\n    .refine((val) => {\r\n      const numbers = val.split(',').map(n => n.trim());\r\n      return numbers.length > 0 && numbers.every(n => !isNaN(Number(n)));\r\n    }, { message: 'Números inválidos. Insira números separados por vírgula.' }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof participationSchema>;\r\n\r\nexport default function ParticiparPage() {\r\n  const router = useRouter();\r\n  const [user, setUser] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [message, setMessage] = useState<{type: 'success' | 'error', text: string} | null>(null);\r\n  const [availableRaffles, setAvailableRaffles] = useState<Raffle[]>([]);\r\n  const [selectedRaffle, setSelectedRaffle] = useState<Raffle | null>(null);\r\n  const [randomQuantity, setRandomQuantity] = useState<number>(1);\r\n  const [availableNumbers, setAvailableNumbers] = useState<number[]>([]);\r\n  const [totalValue, setTotalValue] = useState<number>(0);\r\n\r\n  const { register, handleSubmit, formState: { errors }, setValue, watch } = useForm<FormValues>({\r\n    resolver: zodResolver(participationSchema),\r\n    defaultValues: {\r\n      chosenNumbers: '',\r\n    },\r\n  });\r\n\r\n  // Observar mudanças nos números escolhidos para atualizar o valor total\r\n  const chosenNumbers = watch('chosenNumbers');\r\n\r\n  useEffect(() => {\r\n    if (selectedRaffle?.unit_price && chosenNumbers) {\r\n      const numbers = chosenNumbers.split(',').filter(n => n.trim() !== '');\r\n      const total = numbers.length * selectedRaffle.unit_price;\r\n      setTotalValue(total);\r\n    } else {\r\n      setTotalValue(0);\r\n    }\r\n  }, [chosenNumbers, selectedRaffle?.unit_price]);\r\n\r\n  useEffect(() => {\r\n    const checkUser = async () => {\r\n      const { data } = await supabase.auth.getSession();\r\n      setUser(data.session?.user || null);\r\n      setLoading(false);\r\n      \r\n      if (!data.session) {\r\n        router.push('/login');\r\n      }\r\n    };\r\n    \r\n    const fetchRaffles = async () => {\r\n      const { data, error } = await supabase\r\n        .from('raffles')\r\n        .select('*')\r\n        .eq('status', 'open');\r\n        \r\n      if (error) {\r\n        console.error('Erro ao buscar sorteios:', error);\r\n        return;\r\n      }\r\n      \r\n      setAvailableRaffles(data || []);\r\n      if (data && data.length > 0) {\r\n        setSelectedRaffle(data[0]);\r\n        // Após selecionar o sorteio, buscar os números disponíveis\r\n        await fetchAvailableNumbers(data[0]);\r\n      }\r\n    };\r\n    \r\n    checkUser();\r\n    fetchRaffles();\r\n  }, [router]);\r\n\r\n  // Função para buscar números disponíveis do sorteio selecionado\r\n  const fetchAvailableNumbers = async (raffle: Raffle) => {\r\n    if (!raffle) return;\r\n    \r\n    try {\r\n      // Buscar números já escolhidos\r\n      const { data: existingParticipants, error: participantsError } = await supabase\r\n        .from('participants')\r\n        .select('chosen_numbers')\r\n        .eq('raffle_id', raffle.id);\r\n        \r\n      if (participantsError) throw participantsError;\r\n      \r\n      // Criar um array com todos os números possíveis\r\n      const allNumbers: number[] = [];\r\n      for (let i = raffle.min_number; i <= raffle.max_number; i++) {\r\n        allNumbers.push(i);\r\n      }\r\n      \r\n      // Identificar os números já escolhidos\r\n      const chosenNumbers = existingParticipants?.flatMap(p => p.chosen_numbers) || [];\r\n      \r\n      // Filtrar apenas os números disponíveis\r\n      const available = allNumbers.filter(num => !chosenNumbers.includes(num));\r\n      \r\n      setAvailableNumbers(available);\r\n    } catch (error) {\r\n      console.error('Erro ao buscar números disponíveis:', error);\r\n    }\r\n  };\r\n\r\n  // Função para gerar números aleatórios\r\n  const generateRandomNumbers = () => {\r\n    if (!selectedRaffle || randomQuantity <= 0 || availableNumbers.length === 0) {\r\n      setMessage({\r\n        type: 'error',\r\n        text: 'Não foi possível gerar números aleatórios. Verifique a quantidade solicitada.'\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Verificar se há números suficientes disponíveis\r\n    if (randomQuantity > availableNumbers.length) {\r\n      setMessage({\r\n        type: 'error',\r\n        text: `Só há ${availableNumbers.length} números disponíveis. Escolha uma quantidade menor.`\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Embaralhar e pegar os primeiros N números\r\n    const shuffled = [...availableNumbers].sort(() => Math.random() - 0.5);\r\n    const selected = shuffled.slice(0, randomQuantity);\r\n    \r\n    // Ordenar os números selecionados\r\n    selected.sort((a, b) => a - b);\r\n    \r\n    // Atualizar o campo no formulário\r\n    setValue('chosenNumbers', selected.join(', '));\r\n  };\r\n\r\n  // Quando o sorteio for alterado, buscar números disponíveis\r\n  useEffect(() => {\r\n    if (selectedRaffle) {\r\n      fetchAvailableNumbers(selectedRaffle);\r\n    }\r\n  }, [selectedRaffle]);\r\n\r\n  const validateChosenNumbers = (numbersStr: string, raffle: Raffle) => {\r\n    const numbers = numbersStr.split(',').map(n => parseInt(n.trim(), 10));\r\n    \r\n    // Verificar se todos os números estão dentro do intervalo\r\n    const validRange = numbers.every(n => n >= raffle.min_number && n <= raffle.max_number);\r\n    if (!validRange) {\r\n      return `Os números devem estar entre ${raffle.min_number} e ${raffle.max_number}`;\r\n    }\r\n    \r\n    // Verificar se há números duplicados\r\n    const uniqueNumbers = new Set(numbers);\r\n    if (uniqueNumbers.size !== numbers.length) {\r\n      return 'Não são permitidos números duplicados';\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    if (!selectedRaffle || !user) {\r\n      setMessage({\r\n        type: 'error',\r\n        text: 'Nenhum sorteio selecionado ou usuário não autenticado'\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Validar números escolhidos\r\n    const numbersValidationError = validateChosenNumbers(data.chosenNumbers, selectedRaffle);\r\n    if (numbersValidationError) {\r\n      setMessage({\r\n        type: 'error',\r\n        text: numbersValidationError\r\n      });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setSubmitting(true);\r\n      setMessage(null);\r\n      \r\n      // Converter a string de números para array de números\r\n      const chosenNumbers = data.chosenNumbers.split(',').map(n => parseInt(n.trim(), 10));\r\n      \r\n      // Verificar se os números já foram escolhidos por outra pessoa\r\n      const { data: existingNumbers, error: checkError } = await supabase\r\n        .from('participants')\r\n        .select('chosen_numbers')\r\n        .eq('raffle_id', selectedRaffle.id);\r\n        \r\n      if (checkError) throw checkError;\r\n      \r\n      const alreadyChosenNumbers = existingNumbers?.flatMap(p => p.chosen_numbers) || [];\r\n      const conflictingNumbers = chosenNumbers.filter(n => alreadyChosenNumbers.includes(n));\r\n      \r\n      if (conflictingNumbers.length > 0) {\r\n        setMessage({\r\n          type: 'error',\r\n          text: `Os seguintes números já foram escolhidos: ${conflictingNumbers.join(', ')}`\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Registrar participação usando os dados do usuário logado\r\n      const { error } = await supabase\r\n        .from('participants')\r\n        .insert({\r\n          user_id: user.id,\r\n          name: user.user_metadata.name,\r\n          phone: user.user_metadata.phone,\r\n          chosen_numbers: chosenNumbers,\r\n          raffle_id: selectedRaffle.id,\r\n        });\r\n        \r\n      if (error) throw error;\r\n      \r\n      setMessage({\r\n        type: 'success',\r\n        text: 'Sua participação foi registrada com sucesso!'\r\n      });\r\n      \r\n      // Limpar formulário\r\n      setValue('chosenNumbers', '');\r\n      \r\n      // Redirecionar para página de confirmação\r\n      setTimeout(() => {\r\n        router.push('/confirmacao');\r\n      }, 2000);\r\n      \r\n    } catch (error: any) {\r\n      setMessage({\r\n        type: 'error',\r\n        text: error.message || 'Erro ao registrar participação'\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\r\n        <h1 className=\"text-2xl font-bold text-center mb-6\">Faça login para participar</h1>\r\n        <Link \r\n          href=\"/login\"\r\n          className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\r\n        >\r\n          Ir para o login\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto mt-8 mb-12 p-6 bg-white rounded-lg shadow-md\">\r\n      <h1 className=\"text-2xl font-bold text-center text-green-600 mb-6\">Participar do Sorteio</h1>\r\n      \r\n      {availableRaffles.length === 0 ? (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-lg text-gray-600 mb-4\">Não há sorteios disponíveis no momento.</p>\r\n          <Link\r\n            href=\"/\"\r\n            className=\"text-green-600 hover:text-green-800 font-medium\"\r\n          >\r\n            Voltar para a página inicial\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {message && (\r\n            <div className={`mb-4 p-3 rounded ${message.type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>\r\n              {message.text}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"mb-6\">\r\n            <label htmlFor=\"raffle\" className=\"block text-sm font-medium text-title mb-1\">Selecionar Sorteio</label>\r\n            <select\r\n              id=\"raffle\"\r\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 text-important\"\r\n              onChange={(e) => {\r\n                const selected = availableRaffles.find(r => r.id === e.target.value);\r\n                setSelectedRaffle(selected || null);\r\n              }}\r\n              value={selectedRaffle?.id || ''}\r\n            >\r\n              {availableRaffles.map((raffle) => (\r\n                <option key={raffle.id} value={raffle.id} className=\"text-important\">\r\n                  {raffle.title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          {selectedRaffle && (\r\n            <div className=\"mb-6 p-4 bg-green-50 rounded-md border border-green-200\">\r\n              <h2 className=\"font-bold text-lg mb-2 text-title\">{selectedRaffle.title}</h2>\r\n              \r\n              {selectedRaffle.image_url && (\r\n                <div className=\"mb-4 relative\">\r\n                  <div className=\"relative w-full h-48 mb-3 overflow-hidden rounded-lg\">\r\n                    <Image \r\n                      src={selectedRaffle.image_url}\r\n                      alt={selectedRaffle.title}\r\n                      fill\r\n                      style={{ objectFit: 'cover' }}\r\n                      className=\"rounded-lg\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              <p className=\"text-sm text-description mb-3\">{selectedRaffle.description}</p>\r\n              \r\n              <div className=\"flex flex-wrap items-center justify-between mb-3 p-3 bg-white rounded-md shadow-sm\">\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"font-medium text-title mr-2\">Números disponíveis:</span> \r\n                  <span className=\"font-bold text-important\">{selectedRaffle.min_number} a {selectedRaffle.max_number}</span>\r\n                </div>\r\n                \r\n                {selectedRaffle.unit_price !== undefined && (\r\n                  <div className=\"ml-auto mt-2 sm:mt-0\">\r\n                    <span className=\"px-3 py-1 bg-yellow-100 text-black font-bold rounded-full\">\r\n                      Valor por número: R$ {typeof selectedRaffle.unit_price === 'number' \r\n                        ? selectedRaffle.unit_price.toFixed(2).replace('.', ',') \r\n                        : selectedRaffle.unit_price}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Exibição do valor total */}\r\n              {totalValue > 0 && (\r\n                <div className=\"mt-3 p-3 bg-green-100 rounded-md\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-green-800\">Quantidade de números:</span>\r\n                      <span className=\"ml-2 font-bold text-green-800\">\r\n                        {chosenNumbers.split(',').filter(n => n.trim() !== '').length}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-green-800\">Valor total:</span>\r\n                      <span className=\"ml-2 font-bold text-green-800\">\r\n                        R$ {totalValue.toFixed(2).replace('.', ',')}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <div>\r\n              <label htmlFor=\"chosenNumbers\" className=\"block text-sm font-medium text-title mb-1\">\r\n                Números escolhidos (separados por vírgula)\r\n              </label>\r\n              <input\r\n                id=\"chosenNumbers\"\r\n                type=\"text\"\r\n                {...register('chosenNumbers')}\r\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500\"\r\n                placeholder=\"1, 5, 10, 25, 50\"\r\n              />\r\n              <p className=\"mt-1 text-xs text-gray-500\">\r\n                Escolha números entre {selectedRaffle?.min_number} e {selectedRaffle?.max_number}, separados por vírgula.\r\n              </p>\r\n              {errors.chosenNumbers && (\r\n                <p className=\"mt-1 text-sm text-red-600\">{errors.chosenNumbers.message}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Gerador de números aleatórios */}\r\n            <div className=\"bg-green-50 p-4 rounded-md border border-green-200\">\r\n              <h3 className=\"text-sm font-medium text-green-800 mb-2\">Gerador de números aleatórios</h3>\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"flex-1\">\r\n                  <label htmlFor=\"randomQuantity\" className=\"block text-xs text-gray-500 mb-1\">\r\n                    Quantidade de números\r\n                  </label>\r\n                  <input\r\n                    id=\"randomQuantity\"\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max={availableNumbers.length}\r\n                    value={randomQuantity}\r\n                    onChange={(e) => setRandomQuantity(Math.max(1, parseInt(e.target.value) || 1))}\r\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 text-sm\"\r\n                  />\r\n                </div>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={generateRandomNumbers}\r\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm mt-3\"\r\n                >\r\n                  Gerar\r\n                </button>\r\n              </div>\r\n              <p className=\"mt-2 text-xs text-gray-500\">\r\n                {availableNumbers.length > 0 \r\n                  ? `${availableNumbers.length} números disponíveis para sorteio.` \r\n                  : 'Carregando números disponíveis...'}\r\n              </p>\r\n            </div>\r\n            \r\n            <button\r\n              type=\"submit\"\r\n              disabled={submitting}\r\n              className={`w-full py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 ${\r\n                submitting ? 'opacity-50 cursor-not-allowed' : ''\r\n              }`}\r\n            >\r\n              {submitting ? 'Processando...' : 'Confirmar Participação'}\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}